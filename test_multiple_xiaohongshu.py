#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script test t√≠nh nƒÉng t·∫£i nhi·ªÅu URL Xiaohongshu
"""

import sys
import os
from pathlib import Path

# Th√™m th∆∞ m·ª•c hi·ªán t·∫°i v√†o Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from xiaohongshu_downloader import XiaohongshuDownloader
from config import config

def test_multiple_url_validation():
    """Test validation nhi·ªÅu URL Xiaohongshu"""
    print("=== Test Multiple URL Validation ===")
    
    downloader = XiaohongshuDownloader()
    
    # Test case: nhi·ªÅu URL h·ª£p l·ªá
    valid_urls_text = """https://www.xiaohongshu.com/explore/123456789
https://xiaohongshu.com/explore/abcdef123
https://www.xiaohongshu.com/discovery/item/xyz789
https://xhslink.com/test123"""
    
    urls = [url.strip() for url in valid_urls_text.split('\n') if url.strip()]
    print(f"T·ªïng s·ªë URL: {len(urls)}")
    
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        if downloader.is_xiaohongshu_url(url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    print(f"URL h·ª£p l·ªá: {len(valid_urls)}")
    print(f"URL kh√¥ng h·ª£p l·ªá: {len(invalid_urls)}")
    
    for url in valid_urls:
        print(f"  ‚úÖ {url}")
    
    for url in invalid_urls:
        print(f"  ‚ùå {url}")
    
    assert len(valid_urls) == 4, f"Expected 4 valid URLs, got {len(valid_urls)}"
    assert len(invalid_urls) == 0, f"Expected 0 invalid URLs, got {len(invalid_urls)}"
    
    print("‚úÖ Test multiple URL validation th√†nh c√¥ng!\n")

def test_mixed_url_validation():
    """Test validation URL h·ªón h·ª£p (h·ª£p l·ªá v√† kh√¥ng h·ª£p l·ªá)"""
    print("=== Test Mixed URL Validation ===")
    
    downloader = XiaohongshuDownloader()
    
    # Test case: URL h·ªón h·ª£p
    mixed_urls_text = """https://www.xiaohongshu.com/explore/123456789
https://youtube.com/watch?v=test
https://xiaohongshu.com/discovery/item/abc123
https://google.com
https://xhslink.com/xyz789
invalid_url"""
    
    urls = [url.strip() for url in mixed_urls_text.split('\n') if url.strip()]
    print(f"T·ªïng s·ªë URL: {len(urls)}")
    
    valid_urls = []
    invalid_urls = []
    
    for url in urls:
        if downloader.is_xiaohongshu_url(url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    print(f"URL h·ª£p l·ªá: {len(valid_urls)}")
    print(f"URL kh√¥ng h·ª£p l·ªá: {len(invalid_urls)}")
    
    print("\nURL h·ª£p l·ªá:")
    for url in valid_urls:
        print(f"  ‚úÖ {url}")
    
    print("\nURL kh√¥ng h·ª£p l·ªá:")
    for url in invalid_urls:
        print(f"  ‚ùå {url}")
    
    assert len(valid_urls) == 3, f"Expected 3 valid URLs, got {len(valid_urls)}"
    assert len(invalid_urls) == 3, f"Expected 3 invalid URLs, got {len(invalid_urls)}"
    
    print("\n‚úÖ Test mixed URL validation th√†nh c√¥ng!\n")

def test_empty_and_whitespace():
    """Test x·ª≠ l√Ω URL tr·ªëng v√† kho·∫£ng tr·∫Øng"""
    print("=== Test Empty and Whitespace Handling ===")
    
    downloader = XiaohongshuDownloader()
    
    # Test case: URL v·ªõi kho·∫£ng tr·∫Øng v√† d√≤ng tr·ªëng
    whitespace_urls_text = """  https://www.xiaohongshu.com/explore/123456789  

   
https://xiaohongshu.com/discovery/item/abc123

  https://xhslink.com/xyz789  

"""
    
    urls = [url.strip() for url in whitespace_urls_text.split('\n') if url.strip()]
    print(f"URL sau khi l√†m s·∫°ch: {len(urls)}")
    
    for i, url in enumerate(urls, 1):
        print(f"  {i}. '{url}'")
        assert downloader.is_xiaohongshu_url(url), f"URL {url} should be valid"
    
    assert len(urls) == 3, f"Expected 3 URLs after cleaning, got {len(urls)}"
    
    print("‚úÖ Test empty and whitespace handling th√†nh c√¥ng!\n")

def test_url_parsing_simulation():
    """Test m√¥ ph·ªèng qu√° tr√¨nh parsing URL nh∆∞ trong UI"""
    print("=== Test URL Parsing Simulation ===")
    
    downloader = XiaohongshuDownloader()
    
    # M√¥ ph·ªèng input t·ª´ Text widget
    ui_input = """https://www.xiaohongshu.com/explore/video1
https://xiaohongshu.com/discovery/item/video2
https://youtube.com/watch?v=invalid
https://xhslink.com/video3

https://www.xiaohongshu.com/explore/video4
"""
    
    # X·ª≠ l√Ω gi·ªëng nh∆∞ trong start_xiaohongshu_download
    urls_text = ui_input.strip()
    urls = [url.strip() for url in urls_text.split('\n') if url.strip()]
    
    print(f"URLs t·ª´ UI input: {len(urls)}")
    
    invalid_urls = []
    valid_urls = []
    
    for url in urls:
        if downloader.is_xiaohongshu_url(url):
            valid_urls.append(url)
        else:
            invalid_urls.append(url)
    
    print(f"\nK·∫øt qu·∫£ ph√¢n t√≠ch:")
    print(f"  T·ªïng URL: {len(urls)}")
    print(f"  H·ª£p l·ªá: {len(valid_urls)}")
    print(f"  Kh√¥ng h·ª£p l·ªá: {len(invalid_urls)}")
    
    if invalid_urls:
        print(f"\nURL kh√¥ng h·ª£p l·ªá:")
        for url in invalid_urls:
            print(f"  ‚ùå {url}")
    
    if valid_urls:
        print(f"\nURL h·ª£p l·ªá:")
        for url in valid_urls:
            print(f"  ‚úÖ {url}")
    
    assert len(valid_urls) == 4, f"Expected 4 valid URLs, got {len(valid_urls)}"
    assert len(invalid_urls) == 1, f"Expected 1 invalid URL, got {len(invalid_urls)}"
    
    print("\n‚úÖ Test URL parsing simulation th√†nh c√¥ng!\n")

def main():
    """Ch·∫°y t·∫•t c·∫£ c√°c test"""
    print("üöÄ B·∫Øt ƒë·∫ßu test t√≠nh nƒÉng t·∫£i nhi·ªÅu URL Xiaohongshu\n")
    
    try:
        test_multiple_url_validation()
        test_mixed_url_validation()
        test_empty_and_whitespace()
        test_url_parsing_simulation()
        
        print("üéâ T·∫•t c·∫£ test ƒë√£ pass th√†nh c√¥ng!")
        print("\nüìù T√≠nh nƒÉng t·∫£i nhi·ªÅu URL ƒë√£ s·∫µn s√†ng:")
        print("   ‚úÖ H·ªó tr·ª£ nh·∫≠p nhi·ªÅu URL (m·ªói d√≤ng m·ªôt URL)")
        print("   ‚úÖ Validation t·ª´ng URL ri√™ng bi·ªát")
        print("   ‚úÖ X·ª≠ l√Ω URL h·ªón h·ª£p (h·ª£p l·ªá + kh√¥ng h·ª£p l·ªá)")
        print("   ‚úÖ L√†m s·∫°ch kho·∫£ng tr·∫Øng v√† d√≤ng tr·ªëng")
        print("   ‚úÖ B√°o c√°o chi ti·∫øt k·∫øt qu·∫£ t·∫£i")
        print("\nüéØ ƒê·ªÉ test th·ª±c t·∫ø, ch·∫°y: python main.py")
        
    except Exception as e:
        print(f"‚ùå Test th·∫•t b·∫°i: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)